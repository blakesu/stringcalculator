/* Generated By:JavaCC: Do not edit this line. _Calculator.java */
package com.github.stringcalculator;

import java.io.StringReader;
import java.math.BigDecimal;

class _Calculator implements _CalculatorConstants {
     public _Calculator( String expression ) {
        this( new StringReader( expression ) );
     }

  final public BigDecimal caculate() throws ParseException {
   BigDecimal result = null;
    label_1:
    while (true) {
      result = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case OPEN_PAR:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean check() throws ParseException {
   boolean result = false;
    label_2:
    while (true) {
      result = logical();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case OPEN_PAR:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean logical() throws ParseException {
   boolean left ;
   boolean right ;
    left = relational();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        right = relational();
           left = left && right ;
        break;
      case OR:
        jj_consume_token(OR);
        right = relational();
           left = left || right ;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return left ;}
    throw new Error("Missing return statement in function");
  }

  final public boolean relational() throws ParseException {
   BigDecimal left ;
   BigDecimal middle;
   BigDecimal right ;
   boolean result = false;
    left = Expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case GT:
      case GE:
      case LT:
      case LE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        right = Expression();
           result = left.compareTo( right ) == 0 ;
        break;
      case NE:
        jj_consume_token(NE);
        right = Expression();
           result = left.compareTo( right ) != 0 ;
        break;
      case GT:
        jj_consume_token(GT);
        right = Expression();
           result = left.compareTo( right ) > 0 ;
        break;
      case GE:
        jj_consume_token(GE);
        right = Expression();
           result = left.compareTo( right ) >= 0 ;
        break;
      case LT:
        jj_consume_token(LT);
        right = Expression();
           result = left.compareTo( right ) < 0 ;
        break;
      case LE:
        jj_consume_token(LE);
        right = Expression();
           result = left.compareTo( right ) <= 0 ;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return result ;}
    throw new Error("Missing return statement in function");
  }

  final public BigDecimal Expression() throws ParseException {
   BigDecimal i ;
   BigDecimal value ;
    value = Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        i = Term();
           value = value.add( i ) ;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        i = Term();
           value = value.subtract( i ) ;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return value ;}
    throw new Error("Missing return statement in function");
  }

  final public BigDecimal Term() throws ParseException {
   BigDecimal i ;
   BigDecimal value ;
    value = Primary();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        i = Primary();
          value = value.multiply( i) ;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        i = Primary();
          value = value.divide( i, 8, BigDecimal.ROUND_HALF_UP );
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return value ;}
    throw new Error("Missing return statement in function");
  }

  final public BigDecimal Primary() throws ParseException {
   Token t ;
   BigDecimal d ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
     {if (true) return new BigDecimal( t.image ) ;}
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      d = Expression();
      jj_consume_token(CLOSE_PAR);
     {if (true) return d ;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      d = Primary();
       {if (true) return d.negate() ;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public _CalculatorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20090,0x20090,0x18000,0x18000,0x7e00,0x7e00,0x18,0x18,0x60,0x60,0x20090,};
   }

  /** Constructor with InputStream. */
  public _Calculator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public _Calculator(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new _CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public _Calculator(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new _CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public _Calculator(_CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(_CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
